#include <iostream>
using namespace std;

const int SIZE = 8; // Chessboard size

// Possible moves for the knight
int horizontal[] = { 2, 1, -1, -2, -2, -1, 1, 2 };
int vertical[] = { -1, -2, -2, -1, 1, 2, 2, 1 };

// Function to check if a move is valid
bool isValidMove(int row, int col, int board[][SIZE]) {
    return (row >= 0 && row < SIZE && col >= 0 && col < SIZE && board[row][col] == -1);
}

// Function to solve the Knight's Tour problem
bool knightsTour(int row, int col, int board[][SIZE], int moveCount) {
    if (moveCount == SIZE * SIZE) { // Base case: all squares visited
        return true;
    }

    for (int i = 0; i < 8; i++) {
        int nextRow = row + vertical[i];
        int nextCol = col + horizontal[i];

        if (isValidMove(nextRow, nextCol, board)) {
            board[nextRow][nextCol] = moveCount;

            if (knightsTour(nextRow, nextCol, board, moveCount + 1)) {
                return true;
            }

            board[nextRow][nextCol] = -1; // Backtrack if no solution found
        }
    }

    return false;
}

int main() {
    // Initialize the chessboard
    int board[SIZE][SIZE];
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            board[row][col] = -1;
        }
    }

    int startRow = 0;
    int startCol = 0;
    int moveCount = 0;

    // Start the Knight's Tour
    board[startRow][startCol] = moveCount;
    if (knightsTour(startRow, startCol, board, moveCount + 1)) {
        cout << "A Knight's Tour has been found!" << endl;
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                cout << board[row][col] << "\t";
            }
            cout << endl;
        }
    }
    else {
        cout << "No solution found." << endl;
    }

    system("pause");
    return 0;
}
