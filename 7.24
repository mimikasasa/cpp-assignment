#include <iostream>
using namespace std;

const int N = 8; // 棋盘大小

// 打印棋盘
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// 检查在board[row][col]处放置皇后是否安全
bool isSafe(int row, int col, int board[N][N]) {
    // 检查列
    for (int i = 0; i < row; i++) {
        if (board[i][col]) {
            return false;
        }
    }
    // 检查左上方的对角线
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }
    // 检查右上方的对角线
    for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j]) {
            return false;
        }
    }
    return true;
}

// 解决八皇后问题的递归函数
bool solveNQueens(int board[N][N], int row) {
    if (row == N) {
        // 所有皇后都被放置，问题解决
        return true;
    }
    for (int col = 0; col < N; col++) {
        if (isSafe(row, col, board)) {
            board[row][col] = 1;
            if (solveNQueens(board, row + 1)) {
                return true;
            }
            board[row][col] = 0; // 回溯
        }
    }
    return false;
}

int main() {
    int board[N][N] = {0}; // 初始化棋盘
    if (solveNQueens(board, 0) == false) {
        cout << "无解" << endl;
        return false;
    }
    printBoard(board);
    return 0;
}

